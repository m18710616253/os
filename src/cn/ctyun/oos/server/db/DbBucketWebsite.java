package cn.ctyun.oos.server.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

import cn.ctyun.common.db.JdbcRow;

public class DbBucketWebsite implements JdbcRow {
    /** the only id, Automatically generated by DB read onlyã€‚ */
    private long id = 0;
    public long bucketId = 0;
    
    public DbBucketWebsite(long bucketId) {
        this.bucketId = bucketId;
    }
    
    public long getId() {
        return id;
    }
    
    public static void create(Connection conn) throws SQLException {
        String create = "CREATE TABLE `" + getTableName() + "` (\n"
                + " `id` bigint(20) NOT NULL AUTO_INCREMENT,"
                + "  `bucketId` bigint(20) NOT NULL," + "  PRIMARY KEY (`id`),"
                + "  KEY `bucketId` (`bucketId`) USING BTREE"
                + ") ENGINE=InnoDB DEFAULT CHARSET=utf8";
        Statement st = conn.createStatement();
        try {
            st.execute(create);
        } finally {
            st.close();
        }
    }
    
    @Override
    public void setBy(ResultSet resultSet, boolean ignore) throws SQLException {
        ResultSetMetaData metadata = resultSet.getMetaData();
        for (int i = 1; i <= metadata.getColumnCount(); i++) {
            String aname = metadata.getColumnName(i);
            if (aname.equals("id")) {
                id = resultSet.getLong(i);
            } else if (aname.equals("bucketId")) {
                bucketId = resultSet.getLong(i);
            } else {
                if (!ignore)
                    throw new RuntimeException("Unknown column name : " + aname);
            }
        }
    }
    
    @Override
    public boolean select(Connection conn) throws SQLException {
        PreparedStatement st = conn
                .prepareStatement("SELECT id, bucketId  FROM " + getTableName()
                        + " WHERE bucketId=?");
        try {
            st.setLong(1, bucketId);
            ResultSet rs = st.executeQuery();
            try {
                boolean ret = rs.next();
                if (ret) {
                    setBy(rs, false);
                    assert (!rs.next());
                    return true;
                }
                return false;
            } finally {
                rs.close();
            }
        } finally {
            st.close();
        }
    }
    
    @Override
    public void insert(Connection conn) throws SQLException {
        PreparedStatement st = conn.prepareStatement("INSERT " + getTableName()
                + "( bucketId) " + "VALUES ( ?)",
                PreparedStatement.RETURN_GENERATED_KEYS);
        try {
            st.setLong(1, bucketId);
            st.executeUpdate();
            ResultSet rs = null;
            try {
                rs = st.getGeneratedKeys();
                rs.next();
                id = rs.getInt(1);
            } finally {
                if (rs != null) {
                    rs.close();
                }
            }
        } finally {
            st.close();
        }
    }
    
    @Override
    public void update(Connection conn) throws SQLException {
    }
    
    @Override
    public void delete(Connection conn) throws SQLException {
        PreparedStatement st = conn.prepareStatement("DELETE FROM "
                + getTableName() + " WHERE bucketId=?");
        try {
            st.setLong(1, bucketId);
            st.executeUpdate();
        } finally {
            st.close();
        }
    }
    
    public static String getTableName() {
        return "bucketWebsite";
    }
    
    public static void drop(Connection conn) throws SQLException {
        Statement st = conn.createStatement();
        try {
            st.execute("DROP TABLE IF EXISTS " + getTableName());
        } finally {
            st.close();
        }
    }
}
