package cn.ctyun.oos.server.db.dbpay;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.LinkedHashSet;

import org.apache.commons.lang3.time.DateUtils;

import cn.ctyun.common.Consts;
import cn.ctyun.common.db.JdbcRow;
import common.time.TimeUtils;

/**
 * 订单表
 * 
 * @author Dong chk
 * 
 */
public class DbOrder implements JdbcRow {
    /* Order table, which is used to keep the order information */
    /* id, primary key, Automatically generated by DB read only。 */
    private long id = 0;
    /* OwnerId used to identify the owner */
    public long ownerId;
    /* generate date of order */
    public String date;
    /* Start date of order */
    public String dateBegin;
    /* End date of order */
    public String dateEnd;
    /* Total storage */
    public long totalSize;
    /* Peak storage */
    public long peakSize;
    /* 应属地当前容量 */
    public long originalTotalSize = 0;
    /* 应属地峰值容量 */
    public long originalPeakSize = 0;
    /* Upload size */
    public long upload;
    /* Total flow */
    public long flow;
    /* 漫游上行流量 */
    public long roamUpload = 0;
    /* 漫游下行流量 */
    public long roamFlow = 0;
    /* Total number of Get and Head requests */
    public long ghRequest;
    /* Total number of Get and Head otherRequest */
    public long otherRequest;
    /* Storage consumption */
    public double storageConsume;
    /* Flow Consumption */
    public double flowConsume;
    /* ghRequest Consumption */
    public double ghReqConsume;
    /* otherRequest Consumption */
    public double otherReqConsume;
    /*漫游上行费用*/
    public double roamUploadConsume;
    /*漫游下行费用*/
    public double roamFlowConsume;
    /* Total Consumption */
    public double totalConsume;
    /* single price of each GB each day */
    public double storagePerGB;
    /* price of flow per GB */
    public double flowPerGB;
    /* price of Get and Head request */
    public double ghReqPerTenThous;
    /* price of other requests */
    public double otherReqPerThous;
    /* 漫游上行的单价 */
    public double roamUploadPerGB;
    /* 漫游下行的单价 */
    public double roamFlowPerGB;
    /* strategy */
    public byte strategy;
    // 非互联网流量
    public long noNetFlow = 0;
    public long noNetUpload = 0;
    public long noNetRoamFlow = 0;
    public long noNetRoamUpload = 0; 
    // 非互联网请求   
    public long noNetGHReq = 0;   
    public long noNetOtherReq = 0;
    // 冗余容量、对齐后容量
    public long redundantSize = 0;
    public long alinSize = 0;
    /*非互联网get/head请求费用*/
    public double noNetGHReqConsume;
    /*非互联网other请求费用*/
    public double noNetOtherReqConsume;
    /* 非互联网下行流量费用 */
    public double noNetFlowConsume;
    /* 非互联网漫游下行流量费用 */
    public double noNetRoamFlowConsume;
    /* 非互联网漫游上行流量费用 */
    public double noNetRoamUploadConsume;
    /* 非互联网get/head请求费用，单位每万次 */
    public double noNetGHReqPerTenThous;
    /* 非互联网other请求费用，单位每千次 */
    public double noNetOtherReqPerThous;
    /* 非互联网下行流量费用，单位每GB */
    public double noNetFlowPerGB;
    /* 非互联网漫游上行流量费用，单位每GB */
    public double noNetRoamUploadPerGB;
    /* 非互联网漫游下行流量费用，单位每GB */
    public double noNetRoamFlowPerGB;
    /* Total number of spam request */
    public long spamRequest;
    /* Total image number with porn review false response */
    public long pornReviewFalse;
    /* Total image number with porn review true response */
    public long pornReviewTrue;
    /* spamRequest Consumption*/
    public double spamRequestConsume;
    /* pornReviewFalse Consumption */
    public double pornReviewFalseConsume;
    /* pornReviewTrue Consumption */
    public double pornReviewTrueConsume;
    /* price of spam requests */
    public double spamReqPerThous;
    /* price of pronReviewFalse */
    public double pornRevFalsePerThous;
    /* price of pronReviewTrue */
    public double pornRevTruePerThous;
    
    public LinkedHashSet<String> orders = new LinkedHashSet<String>();
    public String order;
    public long maxPeakSize = 0;
    public long maxUpload = 0;
    public long maxFlow = 0;
    public long maxGhRequest = 0;
    public long maxOtherRequest = 0;
    public double maxTotalConsume = 0;
    public long minPeakSize = Long.MAX_VALUE;
    public String regionName;
    public long maxOriginalPeakSize = 0;
    public long maxRoamUpload = 0;
    public long maxRoamFlow = 0;
    public long minOriginalPeakSize = Long.MAX_VALUE;
    //互联网、非互联网请求、流量、容量最大值
    public long maxNoNetFlow = 0;
    public long maxNoNetUpload = 0;
    public long maxNoNetRoamUpload = 0;
    public long maxNoNetRoamFlow = 0;
    public long maxNoNetGHReq = 0;
    public long maxNoNetOtherReq = 0;
    public long maxRedundantSize = 0;
    public long maxAlinSize = 0;;
    public long minRedundantSize = Long.MAX_VALUE;
    public long minAlinSize = Long.MAX_VALUE;
    public long maxTotalGHReq = 0;
    public long maxTotalOtherReq = 0;
    public long maxTotalUpload = 0;
    public long maxTotalFlow = 0;
    public long maxTotalRoamUpload = 0;
    public long maxTotalRoamFlow = 0;
    public long maxSpamRequest = 0;
    public long maxPornReviewFalse = 0;
    public long maxPornReviewTrue = 0;
    public long maxPorn = 0;

    public DbOrder(long ownerId, String regionName) {
        this.ownerId = ownerId;
        this.regionName = regionName;
    }

    public DbOrder() {
    }
    
    public static void create(Connection conn) throws SQLException {
        String create = "CREATE TABLE IF NOT EXISTS`" + getTableName() + "` (\n"
                + "  `id`  BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,\n"
                + "  `ownerId` BIGINT(30) NOT NULL,\n"
                + "  `regionName` varchar(20) NOT NULL,\n"
                + "  `date` varchar(20) NOT NULL,\n"
                + "  `dateBegin` varchar(20) NOT NULL,\n" + "  `dateEnd` varchar(20) NOT NULL,\n"
                + "  `totalSize` BIGINT(20) DEFAULT '0',\n"
                + "  `peakSize` BIGINT(20) DEFAULT '0',\n" + "  `upload` BIGINT(20) DEFAULT '0',\n"
                + "  `flow` BIGINT(20) DEFAULT '0',\n" + "  `ghRequest` BIGINT(20) DEFAULT '0',\n"
                + "  `otherRequest` BIGINT(20) DEFAULT '0',\n"
                + "  `storageConsume` double(12,3) DEFAULT '0',\n"
                + "  `flowConsume` double(12,3) DEFAULT '0',\n"
                + "  `ghReqConsume` double(12,3) DEFAULT '0',\n"
                + "  `otherReqConsume` double(12,3) DEFAULT '0',\n"
                + "  `totalConsume` double(12,3) DEFAULT '0',\n"
                + "  `storagePerGB` double(6,3) DEFAULT '0',\n"
                + "  `flowPerGB` double(6,3) DEFAULT '0',\n"
                + "  `ghReqPerTenThous` double(6,3) DEFAULT '0',\n"
                + "  `otherReqPerThous` double(6,3) DEFAULT '0',\n"
                + "  `roamUpload` BIGINT(20) DEFAULT '0',\n"
                + "  `roamFlow` BIGINT(20) DEFAULT '0',\n"
                + "  `roamUploadConsume` double(12,3) DEFAULT '0',\n"
                + "  `roamFlowConsume` double(12,3) DEFAULT '0',\n"
                + "  `roamUploadPerGB` double(6,3) DEFAULT '0',\n"
                + "  `roamFlowPerGB` double(6,3) DEFAULT '0',\n"
                + "  `originalTotalSize` BIGINT(20) DEFAULT '0',\n"
                + "  `originalPeakSize` BIGINT(20) DEFAULT '0',\n"
                + "  `noNetFlow` BIGINT(20) DEFAULT '0',\n"
                + "  `noNetUpload` BIGINT(20) DEFAULT '0',\n"
                + "  `noNetRoamFlow` BIGINT(20) DEFAULT '0',\n"
                + "  `noNetRoamUpload` BIGINT(20) DEFAULT '0',\n"
                + "  `noNetGHReq` BIGINT(20) DEFAULT '0',\n"
                + "  `noNetOtherReq` BIGINT(20) DEFAULT '0',\n"
                + "  `redundantSize` BIGINT(20) DEFAULT '0',\n"
                + "  `alinSize` BIGINT(20) DEFAULT '0',\n"
                + "  `noNetGHReqConsume` double(12,3) DEFAULT '0',\n"
                + "  `noNetOtherReqConsume` double(12,3) DEFAULT '0',\n"
                + "  `noNetFlowConsume` double(12,3) DEFAULT '0',\n"
                + "  `noNetRoamFlowConsume` double(12,3) DEFAULT '0',\n"
                + "  `noNetRoamUploadConsume` double(12,3) DEFAULT '0',\n"
                + "  `noNetGHReqPerTenThous` double(6,3) DEFAULT '0',\n"
                + "  `noNetOtherReqPerThous` double(6,3) DEFAULT '0',\n"
                + "  `noNetFlowPerGB` double(6,3) DEFAULT '0',\n"
                + "  `noNetRoamUploadPerGB` double(6,3) DEFAULT '0',\n"
                + "  `noNetRoamFlowPerGB` double(6,3) DEFAULT '0',\n"
                + "  `spamRequest` BIGINT(20) DEFAULT '0',\n"
                + "  `pornReviewFalse` BIGINT(20) DEFAULT '0',\n"
                + "  `pornReviewTrue` BIGINT(20) DEFAULT '0',\n"
                + "  `spamRequestConsume` double(12,3) DEFAULT '0',\n"
                + "  `pornReviewFalseConsume` double(12,3) DEFAULT '0',\n"
                + "  `pornReviewTrueConsume` double(12,3) DEFAULT '0',\n"
                + "  `spamReqPerThous` double(6,3) DEFAULT '0',\n"
                + "  `pornRevFalsePerThous` double(6,3) DEFAULT '0',\n"
                + "  `pornRevTruePerThous` double(6,3) DEFAULT '0',\n"
                + "   PRIMARY KEY (`id`,`ownerId`,`regionName`,`date`)\n" + ") ENGINE=InnoDB DEFAULT CHARSET=utf8";
        Statement st = null;
        try {
            st = conn.createStatement();
            st.execute(create);
        } finally {
            if (st != null)
                st.close();
        }
    }
    
    @Override
    public void setBy(ResultSet resultSet, boolean ignore) throws SQLException {
        ResultSetMetaData metadata = resultSet.getMetaData();
        for (int i = 1; i <= metadata.getColumnCount(); i++) {
            String aname = metadata.getColumnName(i);
            if (aname.equals("id")) {
                id = resultSet.getLong(i);
            } else if (aname.equals("ownerId")) {
                ownerId = resultSet.getLong(i);
            } else if (aname.equals("date")) {
                date = resultSet.getString(i);
            } else if (aname.equals("dateBegin")) {
                dateBegin = resultSet.getString(i);
            } else if (aname.equals("dateEnd")) {
                dateEnd = resultSet.getString(i);
            } else if (aname.equals("totalSize")) {
                totalSize = resultSet.getLong(i);
            } else if (aname.equals("peakSize")) {
                peakSize = resultSet.getLong(i);
            } else if (aname.equals("redundantSize")) {
                redundantSize = resultSet.getLong(i);
            } else if (aname.equals("alinSize")) {
                alinSize = resultSet.getLong(i);
            } else if (aname.equals("upload")) {
                upload = resultSet.getLong(i);
            } else if (aname.equals("flow")) {
                flow = resultSet.getLong(i);
            } else if (aname.equals("noNetUpload")) {
                noNetUpload = resultSet.getLong(i);
            } else if (aname.equals("noNetFlow")) {
                noNetFlow = resultSet.getLong(i);
            } else if (aname.equals("ghRequest")) {
                ghRequest = resultSet.getLong(i);
            } else if (aname.equals("otherRequest")) {
                otherRequest = resultSet.getLong(i);
            } else if (aname.equals("noNetGHReq")) {
                noNetGHReq = resultSet.getLong(i);
            } else if (aname.equals("noNetOtherReq")) {
                noNetOtherReq = resultSet.getLong(i);
            } else if (aname.equals("storageConsume")) {
                storageConsume = resultSet.getDouble(i);
            } else if (aname.equals("flowConsume")) {
                flowConsume = resultSet.getDouble(i);
            } else if (aname.equals("noNetFlowConsume")) {
                noNetFlowConsume = resultSet.getDouble(i);
            } else if (aname.equals("ghReqConsume")) {
                ghReqConsume = resultSet.getDouble(i);
            } else if (aname.equals("otherReqConsume")) {
                otherReqConsume = resultSet.getDouble(i);
            }else if (aname.equals("noNetGHReqConsume")) {
                noNetGHReqConsume = resultSet.getDouble(i);
            } else if (aname.equals("noNetOtherReqConsume")) {
                noNetOtherReqConsume = resultSet.getDouble(i);
            } else if (aname.equals("totalConsume")) {
                totalConsume = resultSet.getDouble(i);
            } else if (aname.equals("storagePerGB")) {
                storagePerGB = resultSet.getDouble(i);
            } else if (aname.equals("flowPerGB")) {
                flowPerGB = resultSet.getDouble(i);
            } else if (aname.equals("noNetFlowPerGB")) {
                noNetFlowPerGB = resultSet.getDouble(i);
            } else if (aname.equals("ghReqPerTenThous")) {
                ghReqPerTenThous = resultSet.getDouble(i);
            } else if (aname.equals("otherReqPerThous")) {
                otherReqPerThous = resultSet.getDouble(i);
            } else if (aname.equals("noNetGHReqPerTenThous")) {
                noNetGHReqPerTenThous = resultSet.getDouble(i);
            } else if (aname.equals("noNetOtherReqPerThous")) {
                noNetOtherReqPerThous = resultSet.getDouble(i);
            } else if (aname.equals("regionName")) {
                regionName = resultSet.getString(i);
            } else if (aname.equals("originalTotalSize")) {
                originalTotalSize = resultSet.getLong(i);
            } else if (aname.equals("originalPeakSize")) {
                originalPeakSize = resultSet.getLong(i);
            } else if (aname.equals("roamUpload")) {
                roamUpload = resultSet.getLong(i);
            } else if (aname.equals("roamFlow")) {
                roamFlow = resultSet.getLong(i);
            } else if (aname.equals("noNetRoamUpload")) {
                noNetRoamUpload = resultSet.getLong(i);
            } else if (aname.equals("noNetRoamFlow")) {
                noNetRoamFlow = resultSet.getLong(i);
            } else if (aname.equals("roamUploadConsume")) {
                roamUploadConsume = resultSet.getDouble(i);
            } else if (aname.equals("roamFlowConsume")) {
                roamFlowConsume = resultSet.getDouble(i);
            } else if (aname.equals("noNetRoamUploadConsume")) {
                noNetRoamUploadConsume = resultSet.getDouble(i);
            } else if (aname.equals("noNetRoamFlowConsume")) {
                noNetRoamFlowConsume = resultSet.getDouble(i);
            } else if (aname.equals("roamUploadPerGB")) {
                roamUploadPerGB = resultSet.getDouble(i);
            } else if (aname.equals("roamFlowPerGB")) {
                roamFlowPerGB = resultSet.getDouble(i);
            } else if (aname.equals("noNetRoamUploadPerGB")) {
                noNetRoamUploadPerGB = resultSet.getDouble(i);
            } else if (aname.equals("noNetRoamFlowPerGB")) {
                noNetRoamFlowPerGB = resultSet.getDouble(i);
            } else if (aname.equals("spamRequest")) {
                spamRequest = resultSet.getLong(i);
            } else if (aname.equals("pornReviewFalse")) {
                pornReviewFalse = resultSet.getLong(i);
            } else if (aname.equals("pornReviewTrue")) {
                pornReviewTrue = resultSet.getLong(i);
            } else if (aname.equals("spamRequestConsume")) {
                spamRequestConsume = resultSet.getDouble(i);
            } else if (aname.equals("pornReviewFalseConsume")) {
                pornReviewFalseConsume = resultSet.getDouble(i);
            } else if (aname.equals("pornReviewTrueConsume")) {
                pornReviewTrueConsume = resultSet.getDouble(i);
            } else if (aname.equals("spamReqPerThous")) {
                spamReqPerThous = resultSet.getLong(i);
            } else if (aname.equals("pornRevFalsePerThous")) {
                pornRevFalsePerThous = resultSet.getLong(i);
            } else if (aname.equals("pornRevTruePerThous")) {
                pornRevTruePerThous = resultSet.getLong(i);
            } else {
                if (!ignore)
                    throw new RuntimeException("Unknown column name : " + aname);
            }
        }// end of for
    }
    
    private void handle(ResultSet rs) throws SQLException {
        StringBuilder sb = new StringBuilder();
        sb.append(rs.getString("date")).append(" ").append(rs.getString("dateBegin")).append(" ")
                .append(rs.getString("dateEnd")).append(" ").append(rs.getLong("totalSize"))
                .append(" ").append(rs.getLong("peakSize")).append(" ")
                .append(rs.getLong("upload")).append(" ").append(rs.getLong("flow")).append(" ")
                .append(rs.getLong("ghRequest")).append(" ").append(rs.getLong("otherRequest"))
                .append(" ").append(rs.getDouble("totalConsume")).append(" ")
                .append(rs.getDouble("storageConsume")).append(" ")
                .append(rs.getDouble("flowConsume")).append(" ")
                .append(rs.getDouble("ghReqConsume")).append(" ")
                .append(rs.getDouble("otherReqConsume")).append(" ")
                .append(rs.getDouble("storagePerGB")).append(" ").append(rs.getDouble("flowPerGB"))
                .append(" ").append(rs.getDouble("ghReqPerTenThous")).append(" ")
                .append(rs.getDouble("otherReqPerThous")).append(" ")
                .append(rs.getLong("roamUpload")).append(" ").append(rs.getLong("roamFlow"))
                .append(" ").append(rs.getDouble("roamUploadConsume")).append(" ")
                .append(rs.getDouble("roamFlowConsume")).append(" ")
                .append(rs.getDouble("roamUploadPerGB")).append(" ")
                .append(rs.getDouble("roamFlowPerGB")).append(" ")
                .append(rs.getLong("originalTotalSize")).append(" ")
                .append(rs.getLong("originalPeakSize")).append(" ")
                .append(rs.getLong("noNetFlow")).append(" ")
                .append(rs.getLong("noNetUpload")).append(" ")
                .append(rs.getLong("noNetRoamFlow")).append(" ")
                .append(rs.getLong("noNetRoamUpload")).append(" ")
                .append(rs.getLong("noNetGHReq")).append(" ")
                .append(rs.getLong("noNetOtherReq")).append(" ")
                .append(rs.getLong("redundantSize")).append(" ")
                .append(rs.getLong("alinSize")).append(" ")
                .append(rs.getDouble("noNetGHReqConsume")).append(" ")
                .append(rs.getDouble("noNetOtherReqConsume")).append(" ")
                .append(rs.getDouble("noNetFlowConsume")).append(" ")
                .append(rs.getDouble("noNetRoamFlowConsume")).append(" ")
                .append(rs.getDouble("noNetRoamUploadConsume")).append(" ")
                .append(rs.getDouble("noNetGHReqPerTenThous")).append(" ")
                .append(rs.getDouble("noNetOtherReqPerThous")).append(" ")
                .append(rs.getDouble("noNetFlowPerGB")).append(" ")
                .append(rs.getDouble("noNetRoamUploadPerGB")).append(" ")
                .append(rs.getDouble("noNetRoamFlowPerGB")).append(" ")
                .append(rs.getLong("upload")+rs.getLong("noNetUpload")).append(" ")
                .append(rs.getLong("flow")+rs.getLong("noNetFlow")).append(" ")
                .append(rs.getLong("roamUpload")+rs.getLong("noNetRoamUpload")).append(" ")
                .append(rs.getLong("roamFlow")+rs.getLong("noNetRoamFlow")).append(" ")
                .append(rs.getLong("ghRequest")+rs.getLong("noNetGHReq")).append(" ")
                .append(rs.getLong("otherRequest")+rs.getLong("noNetOtherReq")).append(" ")
                .append(twoDoublePlus(rs.getDouble("flowConsume"), rs.getDouble("noNetFlowConsume"))).append(" ")
                .append(twoDoublePlus(rs.getDouble("ghReqConsume"), rs.getDouble("noNetGHReqConsume"))).append(" ")
                .append(twoDoublePlus(rs.getDouble("otherReqConsume"), rs.getDouble("noNetOtherReqConsume"))).append(" ")
                .append(twoDoublePlus(rs.getDouble("roamUploadConsume"), rs.getDouble("noNetRoamUploadConsume"))).append(" ")
                .append(twoDoublePlus(rs.getDouble("roamFlowConsume"), rs.getDouble("noNetRoamFlowConsume"))).append(" ")
                .append(rs.getLong("spamRequest")).append(" ")
                .append(rs.getLong("pornReviewFalse")).append(" ")
                .append(rs.getLong("pornReviewTrue")).append(" ")
                .append(rs.getLong("pornReviewFalse")+rs.getLong("pornReviewTrue")).append(" ")
                .append(rs.getDouble("spamRequestConsume")).append(" ")
                .append(rs.getDouble("pornReviewFalseConsume")).append(" ")
                .append(rs.getDouble("pornReviewTrueConsume")).append(" ")
                .append(twoDoublePlus(rs.getDouble("pornReviewFalseConsume"), rs.getDouble("pornReviewTrueConsume"))).append(" ")
                .append(rs.getDouble("spamReqPerThous")).append(" ")
                .append(rs.getDouble("pornRevFalsePerThous")).append(" ")
                .append(rs.getDouble("pornRevTruePerThous")).append(" ");
        orders.add(sb.toString());
    }
    
    private double twoDoublePlus(double a, double b) {
        BigDecimal a1 = new BigDecimal(String.valueOf(a));
        BigDecimal b1 = new BigDecimal(String.valueOf(b));
        return a1.add(b1).doubleValue();
    }
    
    private void handle2(ResultSet rs) throws SQLException {
        StringBuilder sb = new StringBuilder();
        ResultSetMetaData metadata = rs.getMetaData();
        for (int i = 1; i <= metadata.getColumnCount(); i++) {
            String aname = metadata.getColumnName(i);
            if (aname.equals("TotalSize")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("PeakSize")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("redundantSize")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("alinSize")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("Upload")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("noNetUpload")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("Flow")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("noNetFlow")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("GhRequest")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("OtherRequest")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("noNetGHReq")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("noNetOtherReq")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("StoragePerGB")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("FlowPerGB")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("noNetFlowPerGB")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("GhReqPerTenThous")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("OtherReqPerThous")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("noNetGHReqPerTenThous")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("noNetOtherReqPerThous")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("StorageConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("FlowConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("noNetFlowConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("GhReqConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("OtherReqConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("noNetGHReqConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("noNetOtherReqConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("TotalConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("originalTotalSize")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("originalPeakSize")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("roamUpload")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("roamFlow")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("noNetRoamUpload")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("noNetRoamFlow")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("roamUploadConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("roamFlowConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("noNetRoamUploadConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("noNetRoamFlowConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("roamUploadPerGB")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("roamFlowPerGB")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("noNetRoamUploadPerGB")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("noNetRoamFlowPerGB")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("spamRequest")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("pornReviewFalse")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("pornReviewTrue")) {
                sb.append(rs.getLong(i)).append(" ");
            } else if (aname.equals("spamRequestConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("pornReviewFalseConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("pornReviewTrueConsume")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("spamReqPerThous")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("pornRevFalsePerThous")) {
                sb.append(rs.getDouble(i)).append(" ");
            } else if (aname.equals("pornRevTruePerThous")) {
                sb.append(rs.getDouble(i)).append(" ");
            }
        }
        order = sb.toString();
    }
    
    private void handle3(ResultSet rs) throws SQLException {
        StringBuilder sb = new StringBuilder();
        ResultSetMetaData metadata = rs.getMetaData();
        sb.append(dateBegin).append(" ");
        for (int i = 1; i <= metadata.getColumnCount(); i++) {
            String aname = metadata.getColumnName(i);
            if (aname.equals("PeakSize")) {
                long ts = rs.getLong(i);
                if (ts > maxPeakSize)
                    maxPeakSize = ts;
                if (ts < minPeakSize)
                    minPeakSize = ts;
                sb.append(ts).append(" ");
            } else if (aname.equals("Upload")) {
                long ul = rs.getLong(i);
                if (ul > maxUpload)
                    maxUpload = ul;
                sb.append(ul).append(" ");
            } else if (aname.equals("Flow")) {
                long fl = rs.getLong(i);
                if (fl > maxFlow)
                    maxFlow = fl;
                sb.append(fl).append(" ");
            } else if (aname.equals("GhRequest")) {
                long gr = rs.getLong(i);
                if (gr > maxGhRequest)
                    maxGhRequest = gr;
                sb.append(gr).append(" ");
            } else if (aname.equals("OtherRequest")) {
                long or = rs.getLong(i);
                if (or > maxOtherRequest)
                    maxOtherRequest = or;
                sb.append(or).append(" ");
            } else if (aname.equals("TotalConsume")) {
                double tc = rs.getDouble(i);
                if (tc > maxTotalConsume)
                    maxTotalConsume = tc;
                sb.append(tc).append(" ");
            } else if (aname.equals("originalPeakSize")) {
                long ts = rs.getLong(i);
                if (ts > maxOriginalPeakSize)
                    maxOriginalPeakSize = ts;
                if (ts < minOriginalPeakSize)
                    minOriginalPeakSize = ts;
                sb.append(ts).append(" ");
            } else if (aname.equals("roamUpload")) {
                long ul = rs.getLong(i);
                if (ul > maxRoamUpload)
                    maxRoamUpload = ul;
                sb.append(ul).append(" ");
            } else if (aname.equals("roamFlow")) {
                long fl = rs.getLong(i);
                if (fl > maxRoamFlow)
                    maxRoamFlow = fl;
                sb.append(fl).append(" ");
            } else if (aname.equals("noNetRoamFlow")) {
                long fl = rs.getLong(i);
                if (fl > maxNoNetRoamFlow)
                    maxNoNetRoamFlow = fl;
                sb.append(fl).append(" ");
            } else if (aname.equals("noNetRoamUpload")) {
                long fl = rs.getLong(i);
                if (fl > maxNoNetRoamUpload)
                    maxNoNetRoamUpload = fl;
                sb.append(fl).append(" ");
            } else if (aname.equals("noNetUpload")) {
                long fl = rs.getLong(i);
                if (fl > maxNoNetUpload)
                    maxNoNetUpload = fl;
                sb.append(fl).append(" ");
            } else if (aname.equals("noNetFlow")) {
                long fl = rs.getLong(i);
                if (fl > maxNoNetFlow)
                    maxNoNetFlow = fl;
                sb.append(fl).append(" ");
            } else if (aname.equals("noNetGHReq")) {
                long fl = rs.getLong(i);
                if (fl > maxNoNetGHReq)
                    maxNoNetGHReq = fl;
                sb.append(fl).append(" ");           
            } else if (aname.equals("noNetOtherReq")) {
                long fl = rs.getLong(i);
                if (fl > maxNoNetOtherReq)
                    maxNoNetOtherReq = fl;
                sb.append(fl).append(" ");
            } else if (aname.equals("redundantSize")) {
                long fl = rs.getLong(i);
                if (fl > maxRedundantSize)
                    maxRedundantSize = fl;
                if (fl < minRedundantSize)
                    minRedundantSize = fl;
                sb.append(fl).append(" ");
            } else if (aname.equals("alinSize")) {
                long fl = rs.getLong(i);
                if (fl > maxAlinSize)
                    maxAlinSize = fl;
                if (fl < minAlinSize)
                    minAlinSize = fl;
                sb.append(fl).append(" ");
            }else if (aname.equals("totalGHReq")) {
                long fl = rs.getLong(i);
                if (fl > maxTotalGHReq)
                    maxTotalGHReq = fl;
                sb.append(fl).append(" ");
            }else if (aname.equals("totalOtherReq")) {
                long fl = rs.getLong(i);
                if (fl > maxTotalOtherReq)
                    maxTotalOtherReq = fl;
                sb.append(fl).append(" ");
            }else if (aname.equals("totalUpload")) {
                long fl = rs.getLong(i);
                if (fl > maxTotalUpload)
                    maxTotalUpload = fl;
                sb.append(fl).append(" ");
            }else if (aname.equals("totalFlow")) {
                long fl = rs.getLong(i);
                if (fl > maxTotalFlow)
                    maxTotalFlow = fl;
                sb.append(fl).append(" ");
            }else if (aname.equals("totalRoamUpload")) {
                long fl = rs.getLong(i);
                if (fl > maxTotalRoamUpload)
                    maxTotalRoamUpload = fl;
                sb.append(fl).append(" ");
            }else if (aname.equals("totalRoamFlow")) {
                long fl = rs.getLong(i);
                if (fl > maxTotalRoamFlow)
                    maxTotalRoamFlow = fl;
                sb.append(fl).append(" ");
            } else if (aname.equals("SpamRequest")) {
                long sr = rs.getLong(i);
                if (sr > maxSpamRequest)
                    maxSpamRequest = sr;
                sb.append(sr).append(" ");
            } else if (aname.equals("PornReviewFalse")) {
                long pf = rs.getLong(i);
                if (pf > maxPornReviewFalse)
                    maxPornReviewFalse = pf;
                sb.append(pf).append(" ");
            } else if (aname.equals("PornReviewTrue")) {
                long pt = rs.getLong(i);
                if (pt > maxPornReviewTrue)
                    maxPornReviewTrue = pt;
                sb.append(pt).append(" ");
            } else if (aname.equals("Porn")) {
                long p = rs.getLong(i);
                if (p > maxPorn)
                    maxPorn = p;
                sb.append(p);
            }
        }
        order = sb.toString();
    }
    
    private String handleMax(ResultSet rs) throws SQLException {
        StringBuilder sb = new StringBuilder();
        sb.append(dateBegin).append(" ").append(dateEnd).append(" ").append(rs.getLong("MaxPSize"))
                .append(" ").append(rs.getLong("MaxUpload")).append(" ")
                .append(rs.getLong("MaxFlow")).append(" ").append(rs.getLong("MaxGR")).append(" ")
                .append(rs.getLong("MaxOR")).append(" ").append(rs.getDouble("MaxTC")).append(" ")
                .append(rs.getDouble("MaxStorageConsume")).append(" ")
                .append(rs.getDouble("MaxFlowConsume")).append(" ")
                .append(rs.getDouble("MaxGHReqConsume")).append(" ")
                .append(rs.getDouble("MaxOtherReqConsume")).append(" ")
                .append(rs.getLong("MinPSize")).append(" ")
                .append(rs.getLong("MaxOriginalPeakSize")).append(" ")
                .append(rs.getLong("MinOriginalPeakSize")).append(" ")
                .append(rs.getLong("MaxRoamUpload")).append(" ")
                .append(rs.getLong("MaxRoamFlow")).append(" ")
                .append(rs.getDouble("MaxRoamUploadConsume")).append(" ")
                .append(rs.getDouble("MaxRoamFlowConsume")).append(" ")
                .append(rs.getLong("MaxNoNetFlow")).append(" ")
                .append(rs.getLong("MaxNoNetUpload")).append(" ")
                .append(rs.getLong("MaxNoNetRoamFlow")).append(" ")
                .append(rs.getLong("MaxNoNetRoamUpload")).append(" ")            
                .append(rs.getLong("MaxNoNetGHReq")).append(" ")
                .append(rs.getLong("MaxNoNetOtherReq")).append(" ")
                .append(rs.getLong("MaxRedundantSize")).append(" ")
                .append(rs.getLong("MaxAlinSize")).append(" ")
                .append(rs.getDouble("MaxNoNetGHReqConsume")).append(" ")
                .append(rs.getDouble("MaxNoNetOtherReqConsume")).append(" ")
                .append(rs.getDouble("MaxNoNetFlowConsume")).append(" ")
                .append(rs.getDouble("MaxNoNetRoamFlowConsume")).append(" ")
                .append(rs.getDouble("MaxNoNetRoamUploadConsume")).append(" ")
                .append(rs.getLong("MinRedundantSize")).append(" ")
                .append(rs.getLong("MinAlinSize")).append(" ")
                .append(rs.getLong("MaxTotalUpload")).append(" ")
                .append(rs.getLong("MaxTotalFlow")).append(" ")
                .append(rs.getLong("MaxTotalRoamUpload")).append(" ")
                .append(rs.getLong("MaxTotalRoamFlow")).append(" ")
                .append(rs.getLong("MaxTotalGHReq")).append(" ")
                .append(rs.getLong("MaxTotalOtherReq")).append(" ")
                .append(rs.getDouble("MaxTotalFlowConsume")).append(" ")
                .append(rs.getDouble("MaxTotalGHReqConsume")).append(" ")
                .append(rs.getDouble("MaxTotalOtherReqConsume")).append(" ")
                .append(rs.getDouble("MaxTotalRoamUploadConsume")).append(" ")
                .append(rs.getDouble("MaxTotalRoamFlowConsume")).append(" ")
                .append(rs.getLong("MaxSpamReq")).append(" ")
                .append(rs.getLong("MaxPornRevFalse")).append(" ")
                .append(rs.getLong("MaxPornRevTrue")).append(" ")
                .append(rs.getLong("MaxPorn")).append(" ")
                .append(rs.getDouble("MaxSpamReqConsume")).append(" ")
                .append(rs.getDouble("MaxPornRevFalseConsume")).append(" ")
                .append(rs.getDouble("MaxPornRevTrueConsume")).append(" ")
                .append(rs.getDouble("MaxPornConsume"));
        return sb.toString();
    }
    
    @Override
    public boolean select(Connection conn) throws SQLException {
        orders.add(selectMax(conn));
        PreparedStatement st = null;
        try {
            st = conn.prepareStatement("SELECT * FROM `" + getTableName()
                    + "` WHERE ownerId=? AND regionName=? AND dateBegin>=? AND dateEnd<=? " + "ORDER BY date ASC");
            st.setLong(1, ownerId);
            st.setString(2, regionName);
            st.setString(3, dateBegin);
            st.setString(4, dateEnd);
            ResultSet rs = null;
            try {
                rs = st.executeQuery();
                while (rs.next())
                    handle(rs);
                return true;
            } finally {
                if (rs != null)
                    rs.close();
            }
        } finally {
            if (st != null)
                st.close();
        }
    }
    
    public boolean selectSum(Connection conn) throws SQLException {
        PreparedStatement st = null;
        try {
            st = conn.prepareStatement("SELECT" + " SUM(totalSize) AS TotalSize,"
                    + " SUM(peakSize) AS PeakSize," + " SUM(upload) AS Upload,"
                    + " SUM(flow) AS Flow," + "  SUM(ghRequest) AS GhRequest,"
                    + " SUM(otherRequest) AS OtherRequest,"
                    + " SUM(DISTINCT  storagePerGB) AS StoragePerGB,"
                    + " SUM(DISTINCT  flowPerGB) AS FlowPerGB,"
                    + " SUM(DISTINCT  ghReqPerTenThous) AS GhReqPerTenThous,"
                    + " SUM(DISTINCT  otherReqPerThous) AS OtherReqPerThous,"
                    + " SUM(storageConsume) AS StorageConsume,"
                    + " SUM(flowConsume) AS FlowConsume," + " SUM(ghReqConsume) AS GhReqConsume,"
                    + " SUM(otherReqConsume) AS OtherReqConsume,"
                    + " SUM(totalConsume) AS TotalConsume," 
                    + " SUM(originalTotalSize) AS originalTotalSize,"
                    + " SUM(originalPeakSize) AS originalPeakSize," 
                    + " SUM(roamUpload) AS roamUpload,"
                    + " SUM(roamFlow) AS roamFlow," 
                    + " SUM(DISTINCT  roamUploadPerGB) AS roamUploadPerGB,"
                    + " SUM(DISTINCT  roamFlowPerGB) AS roamFlowPerGB,"
                    + " SUM(roamUploadConsume) AS roamUploadConsume,"
                    + " SUM(roamFlowConsume) AS roamFlowConsume,"
                    + " SUM(noNetRoamFlow) AS noNetRoamFlow,"
                    + " SUM(noNetRoamUpload) AS noNetRoamUpload,"
                    + " SUM(noNetGHReq) AS noNetGHReq,"              
                    + " SUM(noNetOtherReq) AS noNetOtherReq,"
                    + " SUM(noNetFlow) AS noNetFlow,"
                    + " SUM(noNetUpload) AS noNetUpload,"
                    + " SUM(redundantSize) AS redundantSize,"
                    + " SUM(alinSize) AS alinSize,"
                    + " SUM(spamRequest) AS spamRequest,"
                    + " SUM(pornReviewFalse) AS pornReviewFalse,"
                    + " SUM(pornReviewTrue) AS pornReviewTrue,"
                    + " SUM(spamRequestConsume) AS spamRequestConsume,"
                    + " SUM(pornReviewFalseConsume) AS pornReviewFalseConsume,"
                    + " SUM(pornReviewTrueConsume) AS pornReviewTrueConsume,"
                    + " SUM(DISTINCT  spamReqPerThous) AS spamReqPerThous,"
                    + " SUM(DISTINCT  pornRevFalsePerThous) AS pornRevFalsePerThous,"
                    + " SUM(DISTINCT  pornRevTruePerThous) AS pornRevTruePerThous"
                    + " FROM `" + getTableName()
                    + "` WHERE ownerId=? AND dateBegin>=? AND dateEnd<=? ");
            st.setLong(1, ownerId);
            st.setString(2, dateBegin);
            st.setString(3, dateEnd);
            ResultSet rs = null;
            try {
                rs = st.executeQuery();
                boolean ret = rs.next();
                if (ret) {
                    handle2(rs);
                    assert (!rs.next());
                    return true;
                }
                return false;
            } finally {
                if (rs != null)
                    rs.close();
            }
        } finally {
            if (st != null)
                st.close();
        }
    }
    
    public boolean selectSumByDay(Connection conn) throws SQLException {
        PreparedStatement st = null;
        try {
            st = conn.prepareStatement("SELECT" + " SUM(peakSize) AS PeakSize,"
                    + " SUM(upload) AS Upload,"
                    + " SUM(flow) AS Flow,"
                    + " SUM(ghRequest) AS GhRequest," 
                    + " SUM(otherRequest) AS OtherRequest,"
                    + " SUM(totalConsume) AS TotalConsume,"
                    + " SUM(originalTotalSize) AS originalTotalSize,"
                    + " SUM(originalPeakSize) AS originalPeakSize,"
                    + " SUM(roamUpload) AS roamUpload,"
                    + " SUM(roamFlow) AS roamFlow,"
                    + " SUM(noNetRoamFlow) AS noNetRoamFlow,"
                    + " SUM(noNetRoamUpload) AS noNetRoamUpload,"
                    + " SUM(noNetUpload) AS noNetUpload,"
                    + " SUM(noNetFlow) AS noNetFlow,"                   
                    + " SUM(noNetGHReq) AS noNetGHReq,"
                    + " SUM(noNetOtherReq) AS noNetOtherReq,"                  
                    + " SUM(redundantSize) AS redundantSize,"
                    + " SUM(alinSize) AS alinSize,"
                    + " SUM(ghRequest+noNetGHReq) AS totalGHReq,"
                    + " SUM(otherRequest+noNetOtherReq) AS totalOtherReq,"
                    + " SUM(upload+noNetUpload) AS totalUpload,"
                    + " SUM(flow+noNetFlow) AS totalFlow,"
                    + " SUM(roamUpload+noNetRoamUpload) AS totalRoamUpload,"
                    + " SUM(roamFlow+noNetRoamFlow) AS totalRoamFlow,"
                    + " SUM(spamRequest) AS SpamRequest,"
                    + " SUM(pornReviewFalse) AS PornReviewFalse,"
                    + " SUM(pornReviewTrue) AS PornReviewTrue,"
                    + " SUM(pornReviewFalse+pornReviewTrue) AS Porn"
                    + " FROM `" + getTableName()
                    + "` WHERE regionName=? AND dateBegin>=? AND dateEnd<=?");
            st.setString(1, regionName);
            st.setString(2, dateBegin);
            st.setString(3, dateEnd);
            ResultSet rs = null;
            try {
                rs = st.executeQuery();
                boolean ret = rs.next();
                if (ret) {
                    handle3(rs);
                    assert (!rs.next());
                    return true;
                }
                return false;
            } finally {
                if (rs != null)
                    rs.close();
            }
        } finally {
            if (st != null)
                st.close();
        }
    }
    
    public void selectActivity(Connection conn) throws SQLException {
        PreparedStatement st = conn.prepareStatement(
                "SELECT T1.*,IFNULL(T2.totalSize,0) totalSize " + 
                "FROM ( " +         
                "       SELECT T1.ownerId " +         
                "              ,MAX(T1.peakSize) peakSize" +         
                "              ,SUM(T1.flow) transfer" +         
                "              ,SUM(T1.ghRequest) ghRequest" +         
                "              ,SUM(T1.otherRequest) other" +         
                "              ,SUM(T1.ghRequest)+SUM(T1.otherRequest) total " +         
                "       FROM   `"+getTableName()+"` T1 " + 
                "       WHERE   T1.dateBegin>=? "+
                "       AND     T1.dateEnd<=? "+
                "       AND     T1.regionName='"+Consts.GLOBAL_DATA_REGION+"'" +
                "       GROUP BY T1.ownerId "+
                "       HAVING   SUM(T1.ghRequest)+SUM(T1.otherRequest) > 0 "+
                "       ORDER BY (SUM(T1.ghRequest) + SUM(T1.otherRequest)) DESC" + 
                "       LIMIT 100 "+
                ") T1 LEFT JOIN ("+
                "   SELECT ownerId,totalSize "+
                "   FROM   `"+getTableName()+"` "+
                "   WHERE   dateBegin>=? "+
                "   AND     dateEnd<=? "+
                "   AND     regionName='"+Consts.GLOBAL_DATA_REGION+"' " +
                ") T2 ON T1.ownerId = T2.ownerId "+
                "ORDER BY T1.total DESC" );
        try {
            String lastDay = TimeUtils.toYYYY_MM_dd(DateUtils.addDays(new Date(), -1));
            
            st.setString(1, dateBegin);
            st.setString(2, dateEnd);
            st.setString(3, lastDay);
            st.setString(4, lastDay);
            ResultSet rs = st.executeQuery();
            try {
                StringBuilder sb = new StringBuilder();
                while (rs.next()) {
                    sb.setLength(0);
                    sb.append(rs.getLong("ownerId")).append(",")
                      .append(rs.getLong("peakSize")).append(",")
                      .append(rs.getLong("transfer")).append(",")
                      .append(rs.getLong("ghRequest")).append(",")
                      .append(rs.getLong("other")).append(",")
                      .append(rs.getLong("total")).append(",")
                      .append(rs.getLong("totalSize"));
                    orders.add(sb.toString());
                }
            } finally {
                rs.close();
            }
        } finally {
            st.close();
        }
    }
    
    public boolean selectById(Connection conn) throws SQLException {
        PreparedStatement st = null;
        try {
            st = conn.prepareStatement("SELECT * FROM `" + getTableName() + "` WHERE id=?");
            st.setLong(1, id);
            ResultSet rs = null;
            try {
                rs = st.executeQuery();
                boolean ret = rs.next();
                if (ret) {
                    setBy(rs, false);
                    assert (!rs.next());
                    return true;
                }
                return false;
            } finally {
                if (rs != null)
                    rs.close();
            }
        } finally {
            if (st != null)
                st.close();
        }
    }
    
    private String selectMax(Connection conn) throws SQLException {
        PreparedStatement st = null;
        try {
            st = conn.prepareStatement("SELECT " + "MAX(peakSize) AS MaxPSize,"+ " MIN(peakSize) AS MinPSize,"
                    + " MAX(upload) AS MaxUpload," + " MAX(flow) AS MaxFlow,"
                    + " MAX(ghRequest) AS MaxGR," + " MAX(totalConsume) AS MaxTC,"
                    + " MAX(otherRequest) AS MaxOR,"
                    + "MAX(storageConsume) AS MaxStorageConsume,"
                    + "MAX(flowConsume) AS MaxFlowConsume,"
                    + "MAX(ghReqConsume) AS MaxGHReqConsume,"
                    + "MAX(otherReqConsume) AS MaxOtherReqConsume,"
                    + "MAX(originalPeakSize) AS MaxOriginalPeakSize,"
                    + "MIN(originalPeakSize) AS MinOriginalPeakSize,"
                    + "MAX(roamUpload) AS MaxRoamUpload,"
                    + "MAX(roamFlow) AS MaxRoamFlow,"
                    + "MAX(roamUploadConsume) AS MaxRoamUploadConsume,"
                    + "MAX(roamFlowConsume) AS MaxRoamFlowConsume,"
                    + "MAX(noNetFlow) AS MaxNoNetFlow,"
                    + "MAX(noNetUpload) AS MaxNoNetUpload,"
                    + "MAX(noNetRoamFlow) AS MaxNoNetRoamFlow,"
                    + "MAX(noNetRoamUpload) AS MaxNoNetRoamUpload,"
                    + "MAX(noNetGHReq) AS MaxNoNetGHReq,"
                    + "MAX(noNetOtherReq) AS MaxNoNetOtherReq,"
                    + "MAX(redundantSize) AS MaxRedundantSize,"
                    + "MAX(alinSize) AS MaxAlinSize,"
                    + "MAX(noNetGHReqConsume) AS MaxNoNetGHReqConsume,"
                    + "MAX(noNetOtherReqConsume) AS MaxNoNetOtherReqConsume,"
                    + "MAX(noNetFlowConsume) AS MaxNoNetFlowConsume,"
                    + "MAX(noNetRoamFlowConsume) AS MaxNoNetRoamFlowConsume,"
                    + "MAX(noNetRoamUploadConsume) AS MaxNoNetRoamUploadConsume,"
                    + "MIN(redundantSize) AS MinRedundantSize,"
                    + "MIN(alinSize) AS MinAlinSize,"
                    + "MAX(upload+noNetUpload) AS MaxTotalUpload,"
                    + "MAX(flow+noNetFlow) AS MaxTotalFlow,"
                    + "MAX(roamUpload+noNetRoamUpload) AS MaxTotalRoamUpload,"
                    + "MAX(roamFlow+noNetRoamFlow) AS MaxTotalRoamflow,"
                    + "MAX(ghRequest+noNetGHReq) AS MaxTotalGHReq,"
                    + "MAX(otherRequest+noNetOtherReq) AS MaxTotalOtherReq,"
                    + "MAX(flowConsume+noNetFlowConsume) AS MaxTotalFlowConsume,"
                    + "MAX(ghReqConsume+noNetGHReqConsume) AS MaxTotalGHReqConsume,"
                    + "MAX(otherReqConsume+noNetOtherReqConsume) AS MaxTotalOtherReqConsume,"
                    + "MAX(roamUploadConsume+noNetRoamUploadConsume) AS MaxTotalRoamUploadConsume,"
                    + "MAX(roamFlowConsume+noNetRoamFlowConsume) AS MaxTotalRoamFlowConsume,"
                    + "MAX(spamRequest) AS MaxSpamReq,"
                    + "MAX(pornReviewFalse) AS MaxPornRevFalse,"
                    + "MAX(pornReviewTrue) AS MaxPornRevTrue,"
                    + "MAX(pornReviewFalse+pornReviewTrue) AS MaxPorn,"
                    + "MAX(spamRequestConsume) AS MaxSpamReqConsume,"
                    + "MAX(pornReviewFalseConsume) AS MaxPornRevFalseConsume,"
                    + "MAX(pornReviewTrueConsume) AS MaxPornRevTrueConsume,"
                    + "MAX(pornReviewFalseConsume+pornReviewTrueConsume) AS MaxPornConsume"
                    + " FROM `" + getTableName()
                    + "` WHERE ownerId=? AND regionName=? AND dateBegin>=? AND dateEnd<=? ");
            st.setLong(1, ownerId);
            st.setString(2, regionName);
            st.setString(3, dateBegin);
            st.setString(4, dateEnd);
            ResultSet rs = null;
            try {
                rs = st.executeQuery();
                boolean ret = rs.next();
                if (ret) {
                    return handleMax(rs);
                }
                return null;
            } finally {
                if (rs != null)
                    rs.close();
            }
        } finally {
            if (st != null)
                st.close();
        }
    }
    
    @Override
    public void insert(Connection conn) throws SQLException {
        PreparedStatement st = null;
        try {
            st = conn
                    .prepareStatement("INSERT `"
                            + getTableName()
                            + "` ( ownerId, date, dateBegin, dateEnd, totalSize, peakSize, upload, flow, ghRequest, "
                            + "otherRequest, storageConsume, flowConsume, ghReqConsume, otherReqConsume, totalConsume, "
                            + "storagePerGB, flowPerGB, ghReqPerTenThous, otherReqPerThous, regionName,originalTotalSize,originalPeakSize,roamUpload,roamFlow,roamUploadConsume,roamFlowConsume,roamUploadPerGB,roamFlowPerGB, "
                            + "noNetFlow, noNetUpload, noNetRoamFlow, noNetRoamUpload, noNetGHReq, noNetOtherReq, redundantSize, alinSize, "
                            + "noNetGHReqConsume, noNetOtherReqConsume, noNetFlowConsume, noNetRoamFlowConsume, noNetRoamUploadConsume, noNetGHReqPerTenThous, noNetOtherReqPerThous, noNetFlowPerGB, noNetRoamUploadPerGB,noNetRoamFlowPerGB, "
                            + "spamRequest, pornReviewFalse, pornReviewTrue, spamRequestConsume, pornReviewFalseConsume, pornReviewTrueConsume,spamReqPerThous,pornRevFalsePerThous,pornRevTruePerThous) "
                            + "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            st.setLong(1, ownerId);
            st.setString(2, date);
            st.setString(3, dateBegin);
            st.setString(4, dateEnd);
            st.setLong(5, totalSize);
            st.setLong(6, peakSize);
            st.setLong(7, upload);
            st.setLong(8, flow);
            st.setLong(9, ghRequest);
            st.setLong(10, otherRequest);
            st.setDouble(11, storageConsume);
            st.setDouble(12, flowConsume);
            st.setDouble(13, ghReqConsume);
            st.setDouble(14, otherReqConsume);
            st.setDouble(15, totalConsume);
            st.setDouble(16, storagePerGB);
            st.setDouble(17, flowPerGB);
            st.setDouble(18, ghReqPerTenThous);
            st.setDouble(19, otherReqPerThous);
            st.setString(20, regionName);
            st.setLong(21, originalTotalSize);
            st.setLong(22, originalPeakSize);
            st.setLong(23, roamUpload);
            st.setLong(24, roamFlow);
            st.setDouble(25, roamUploadConsume);
            st.setDouble(26, roamFlowConsume);
            st.setDouble(27, roamUploadPerGB);
            st.setDouble(28, roamFlowPerGB);
            st.setLong(29, noNetFlow);
            st.setLong(30, noNetUpload);
            st.setLong(31, noNetRoamFlow);
            st.setLong(32, noNetRoamUpload);
            st.setLong(33, noNetGHReq);
            st.setLong(34, noNetOtherReq);
            st.setLong(35, redundantSize);
            st.setLong(36, alinSize);
            st.setDouble(37, noNetGHReqConsume);
            st.setDouble(38, noNetOtherReqConsume);
            st.setDouble(39, noNetFlowConsume);
            st.setDouble(40, noNetRoamFlowConsume);
            st.setDouble(41, noNetRoamUploadConsume);
            st.setDouble(42, noNetGHReqPerTenThous);
            st.setDouble(43, noNetOtherReqPerThous);
            st.setDouble(44, noNetFlowPerGB);
            st.setDouble(45, noNetRoamUploadPerGB);
            st.setDouble(46, noNetRoamFlowPerGB);
            st.setLong(47, spamRequest);
            st.setLong(48, pornReviewFalse);
            st.setLong(49, pornReviewTrue);
            st.setDouble(50, spamRequestConsume);
            st.setDouble(51, pornReviewFalseConsume);
            st.setDouble(52, pornReviewTrueConsume);
            st.setDouble(53, spamReqPerThous);
            st.setDouble(54, pornRevFalsePerThous);
            st.setDouble(55, pornRevTruePerThous);
            st.executeUpdate();
        } finally {
            if (st != null)
                st.close();
        }
    }
    
    @Override
    public void update(Connection conn) throws SQLException {
        throw new RuntimeException("not implemented yet.");
    }
    
    @Override
    public void delete(Connection conn) throws SQLException {
        PreparedStatement st = conn.prepareStatement("DELETE FROM `" + getTableName()
                + "` WHERE ownerId=? " + "AND " + "dateBegin>=? " + "AND " + "dateEnd<?");
        try {
            st.setLong(1, ownerId);
            st.setString(2, dateBegin);
            st.setString(3, dateEnd);
            st.executeUpdate();
        } finally {
            st.close();
        }
    }
    
    public static void drop(Connection conn) throws SQLException {
        Statement st = conn.createStatement();
        try {
            st.execute("DROP TABLE IF EXISTS `" + getTableName() + "`");
        } finally {
            st.close();
        }
    }
    
    public static String getTableName() {
        return "order";
    }

    public String selectMonthSum(Connection conn) throws SQLException {
        PreparedStatement st = null;
        try {
            st = conn.prepareStatement("SELECT "
                    + " MAX(peakSize)   AS peakSize,"
                    + " SUM(flow)       AS flow," 
                    + " SUM(roamFlow)   AS roamFlow,"
                    + " SUM(ghRequest)  AS ghRequest" 
                    + " FROM `" + getTableName()
                    + "` WHERE ownerId=? AND regionName=? AND dateBegin>=? AND dateEnd<=? ");
            st.setLong(1, ownerId);
            st.setString(2, regionName);
            st.setString(3, dateBegin);
            st.setString(4, dateEnd);
            ResultSet rs = null;
            try {
                rs = st.executeQuery();
                boolean ret = rs.next();
                if (ret) {
                    StringBuilder sb = new StringBuilder();
                    sb.append(rs.getLong("peakSize")).append(" ")
                      .append(rs.getLong("flow")).append(" ")
                      .append(rs.getLong("roamFlow")).append(" ")
                      .append(rs.getLong("ghRequest"));
                    
                    return sb.toString();
                }
                
                return null;
            } finally {
                if (rs != null)
                    rs.close();
            }
        } finally {
            if (st != null)
                st.close();
        }
    }
}